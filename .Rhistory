poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-as.numeric(poke.train$isLegendary)
pokeframe[is.na(pokeframe)] <- 0
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
na.omit(pokeframe)
na.omit(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
pokeframe<-na.omit(pokeframe)
poke.train$isLegendary<-na.omit(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(pokeframe, cl = poke.train$isLegendary, k = 5, prob = TRUE, use.all = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
dim(distPoke)
dim(pokeframe)
dim(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
#distPoke<-daisy(pokeNum)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
head(out[clusterGroups,])
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
out[clusterGroups,]
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
dim(distPoke)
dim(pokeframe)
dim(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
poke.train$isLegendary<-factor(poke.train$isLegendary)
dim(distPoke)
dim(pokeframe)
dim(poke.train[,13])
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
factor(poke.train[,13])
dim(distPoke)
dim(pokeframe)
dim(poke.train[,13])
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
pokeframe<-data.frame(poke.train$isLegendary)
factor(poke.train[,13])
distPoke
knitr::opts_chunk$set(echo = TRUE)
pokemon<-read.csv("pokemon_alopez247.csv")
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
eucdist<-dist(pokemon, method="euclidean")
mandist<-dist(pokemon, method = "manhattan")
clusPokemon<-hclust(eucdist, method = "single")
clusPokemon2<-hclust(mandist, method = "single")
plot(clusPokemon)
plot(clusPokemon2)
clusPokemonAvg<-hclust(eucdist, method = "average")
clusPokemonAvg2<-hclust(mandist, method = "average")
plot(clusPokemonAvg)
plot(clusPokemonAvg2)
clusComplete<-hclust(eucdist, method = "complete")
clusComplete2<-hclust(mandist, method = "complete")
plot(clusComplete)
plot(clusComplete2)
mancom <- cutree(clusComplete2, 2)
euccom<-cutree(clusComplete, 2)
manavg <- cutree(clusPokemonAvg2, 2)
eucavg<-cutree(clusPokemonAvg, 2)
table(mancom, euccom)
table(manavg, eucavg)
table(manavg, mancom)
table(euccom, eucavg)
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
#distPoke<-daisy(pokeNum)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
head(out[clusterGroups,])
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
out[clusterGroups,]
for(i in 1:7) {
print(paste("Mean for total for cluster ",i))
print(mean(out[which(out$clusterNum==i),]$Total))
}
for(i in 1:7) {
print(paste("Number of isLegendary for cluster ",i))
legendTemp<-out[which(out$clusterNum==i),]
print(count(legendTemp,vars=isLegendary))
}
library(ggplot2)
type<-ggplot(pokemon, aes(pokemon$Type_1, fill = pokemon$Type_1)) + geom_histogram(stat="count", color = "black") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
type
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
maxTotal<-order(pokemon$Total, decreasing = TRUE)
head(pokemon[maxTotal,])
library(ggplot2)
plot<-ggplot(pokemon, aes(x =Total, fill = isLegendary)) + geom_histogram()
plot
pokemon$hasGender<-factor(pokemon$hasGender)
plot2<-ggplot(pokemon, aes(x =hasGender, fill = isLegendary)) + geom_bar()
plot2
library(DAAG)
linmod <- lm(poke.train$Total~poke.train$HP+poke.train$Attack+poke.train$Defense)
summary(linmod)
#plot(linmod)
plot(poke.train$HP+poke.train$Attack+poke.train$Defense, poke.train$Total)
abline(linmod, h = 0.5, col = "red")
#mmmm tasty sig values
predicted<-predict(linmod, newdata=poke.test)
mean(linmod$residuals^2)
mean((poke.test$Total-predicted)^2)
library(tree)
poke<-data.frame(pokemon)
attach(poke)
pocl<-tree(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke)
plot(pocl)
text(pocl)
cv.pocl<-cv.tree(pocl, FUN=prune.tree)
plot(cv.pocl,type="b")
p.pocl<-prune.tree(pocl,best=10)
plot(p.pocl)
text(p.pocl)
summary(p.pocl)
library(randomForest)
set.seed(1995)
pokebag<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=6,importance=FALSE)
pokebag
pokebag2<-randomForest(isLegendary~ Total+hasGender,data=poke.train,mtry=6,importance=FALSE)
pokebag2
pokeRF<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=3,importance=TRUE)
pokeRF
pokeRF2<-randomForest(isLegendary~Total+hasGender,data=poke.train,mtry=3,importance=TRUE)
pokeRF2
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
dim(distPoke)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
length(distPoke)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-data.frame(poke.train)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-data.frame(poke.train)
dim(poke.train)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-data.frame(poke.train)
dim(poke.train)
length(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(distPoke, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-data.frame(poke.train)
dim(poke.train)
length(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(poke.train, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-data.frame(na.omit(poke.train))
dim(poke.train)
length(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(poke.train, cl = na.omit(poke.train$isLegendary), k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.train<-na.omit(poke.train)
poke.train<-data.frame((poke.train))
dim(poke.train)
length(poke.train$isLegendary)
library(class)
knnrun<-knn.cv(poke.train, cl = poke.train$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.trainNum<-as.numeric(poke.train)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.trainNum<-as.integer(poke.train)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.trainNum<-factor(poke.train)
poke.trainNum<-as.numeric(poke.trainNum)
poke.train<-data.frame((poke.trainNum))
dim(poke.trainNum)
length(poke.train$isLegendaryNum)
library(class)
knnrun<-knn.cv(poke.trainNum, cl = poke.trainNum$isLegendary, k = 5, prob = TRUE)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
poke.trainNum<-factor(poke.train)
poke.trainNum<-as.numeric(poke.trainNum)
poke.train<-data.frame((poke.trainNum))
dim(poke.trainNum)
length(poke.train$isLegendaryNum)
library(class)
knnrun<-knn.cv(poke.trainNum, cl = poke.trainNum$isLegendary, k = 5, prob = TRUE)
knitr::opts_chunk$set(echo = TRUE)
pokemon<-read.csv("pokemon_alopez247.csv")
#plot(pokemon)
#plot(pokemon$Name~pokemon$Type_1)
#plot(pokemon$Name~. , data = pokemon, col = "blueviolet")
#look at all those tasty graphs
summary(pokemon)
library(ggplot2)
type<-ggplot(pokemon, aes(pokemon$Type_1, fill = pokemon$Type_1)) + geom_histogram(stat="count", color = "black") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
type
#n <- nrow(pokemon)
#shuffled_df <- pokemon[sample(n), ]
#train_indices <- 1:round(0.6 * n)
#train <- shuffled_df[train_indices, ]
#test_indices <- (round(0.6 * n) + 1):n
#test <- shuffled_df[test_indices, ]
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
library(DAAG)
linmod <- lm(poke.train$Total~poke.train$HP+poke.train$Attack+poke.train$Defense)
summary(linmod)
#plot(linmod)
plot(poke.train$HP+poke.train$Attack+poke.train$Defense, poke.train$Total)
abline(linmod, h = 0.5, col = "red")
#mmmm tasty sig values
predicted<-predict(linmod, newdata=poke.test)
mean(linmod$residuals^2)
mean((poke.test[,5]-predicted)^2)
eucdist<-dist(pokemon, method="euclidean")
mandist<-dist(pokemon, method = "manhattan")
clusPokemon<-hclust(eucdist, method = "single")
clusPokemon2<-hclust(mandist, method = "single")
plot(clusPokemon)
plot(clusPokemon2)
clusPokemonAvg<-hclust(eucdist, method = "average")
clusPokemonAvg2<-hclust(mandist, method = "average")
plot(clusPokemonAvg)
plot(clusPokemonAvg2)
clusComplete<-hclust(eucdist, method = "complete")
clusComplete2<-hclust(mandist, method = "complete")
plot(clusComplete)
plot(clusComplete2)
mancom <- cutree(clusComplete2, 2)
euccom<-cutree(clusComplete, 2)
manavg <- cutree(clusPokemonAvg2, 2)
eucavg<-cutree(clusPokemonAvg, 2)
table(mancom, euccom)
table(manavg, eucavg)
table(manavg, mancom)
table(euccom, eucavg)
library(tree)
poke<-data.frame(pokemon)
attach(poke)
pocl<-tree(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke)
plot(pocl)
text(pocl)
cv.pocl<-cv.tree(pocl, FUN=prune.tree)
plot(cv.pocl,type="b")
p.pocl<-prune.tree(pocl,best=10)
plot(p.pocl)
text(p.pocl)
summary(p.pocl)
library(randomForest)
set.seed(1995)
pokebag<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=6,importance=FALSE)
pokebag
pokebag2<-randomForest(isLegendary~ Total+hasGender,data=poke.train,mtry=6,importance=FALSE)
pokebag2
pokeRF<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=3,importance=TRUE)
pokeRF
pokeRF2<-randomForest(isLegendary~Total+hasGender,data=poke.train,mtry=3,importance=TRUE)
pokeRF2
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
maxTotal<-order(pokemon$Total, decreasing = TRUE)
head(pokemon[maxTotal,])
library(ggplot2)
plot<-ggplot(pokemon, aes(x =Total, fill = isLegendary)) + geom_histogram()
plot
pokemon$hasGender<-factor(pokemon$hasGender)
plot2<-ggplot(pokemon, aes(x =hasGender, fill = isLegendary)) + geom_bar()
plot2
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
#distPoke<-daisy(pokeNum)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
#kAnimals<-kmeans(dAnimals, 3)
#plot(dAnimals, col = kAnimals$cluster)
#points(kAnimals$centers, col = 1:3, pch=8, cex=2)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
#kAnimals$cluster
#table(rownames(pokemon), kPoke2$cluster)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
head(out[clusterGroups,])
library(class)
knnrun<-knn.cv(pokeDist, cl = poke.train$isLegendary, k = 5, prob = TRUE)
