library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
#distPoke<-daisy(pokeNum)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
head(out[clusterGroups,])
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
out[clusterGroups,]
for(i in 1:7) {
print(paste("Mean for total for cluster ",i))
print(mean(out[which(out$clusterNum==i),]$Total))
}
for(i in 1:7) {
print(paste("Number of isLegendary for cluster ",i))
legendTemp<-out[which(out$clusterNum==i),]
print(count(legendTemp,vars=isLegendary))
}
library(ggplot2)
type<-ggplot(pokemon, aes(pokemon$Type_1, fill = pokemon$Type_1)) + geom_histogram(stat="count", color = "black") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
type
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
maxTotal<-order(pokemon$Total, decreasing = TRUE)
head(pokemon[maxTotal,])
library(ggplot2)
plot<-ggplot(pokemon, aes(x =Total, fill = isLegendary)) + geom_histogram()
plot
pokemon$hasGender<-factor(pokemon$hasGender)
plot2<-ggplot(pokemon, aes(x =hasGender, fill = isLegendary)) + geom_bar()
plot2
library(DAAG)
linmod <- lm(poke.train$Total~poke.train$HP+poke.train$Attack+poke.train$Defense)
summary(linmod)
#plot(linmod)
plot(poke.train$HP+poke.train$Attack+poke.train$Defense, poke.train$Total)
abline(linmod, h = 0.5, col = "red")
#mmmm tasty sig values
predicted<-predict(linmod, newdata=poke.test)
mean(linmod$residuals^2)
mean((poke.test$Total-predicted)^2)
library(tree)
poke<-data.frame(pokemon)
attach(poke)
pocl<-tree(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke)
plot(pocl)
text(pocl)
cv.pocl<-cv.tree(pocl, FUN=prune.tree)
plot(cv.pocl,type="b")
p.pocl<-prune.tree(pocl,best=10)
plot(p.pocl)
text(p.pocl)
summary(p.pocl)
library(randomForest)
set.seed(1995)
pokebag<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=6,importance=FALSE)
pokebag
pokebag2<-randomForest(isLegendary~ Total+hasGender,data=poke.train,mtry=6,importance=FALSE)
pokebag2
pokeRF<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=3,importance=TRUE)
pokeRF
pokeRF2<-randomForest(isLegendary~Total+hasGender,data=poke.train,mtry=3,importance=TRUE)
pokeRF2
# set.seed(1995)
# train<-sample(1:nrow(pokemon),432)
# poke.test<-pokemon[-train,]
# poke.train<-pokemon[train,]
# pokeknn<-poke.train[,-13]
# pokeknn<-data.frame(pokeknn)
#
# library(class)
# # knnrun<-knn.cv(poke.trainNum, cl = poke.trainNum$isLegendary, k = 5, prob = TRUE)
# # table(poke.trainNum$isLegendary, knnrun)
#
# knnrun<-knn(poke.train[, -13],poke.test[,-13],  cl = poke.train$isLegendary, k = 4, prob=TRUE)
# table(poketrain$isLegendary, knnrun)
# # <!-- library(class) -->
# # <!-- knnrun<-knn.cv(pokeDist, cl = poke.train$isLegendary, k = 5, prob = TRUE) -->
# # <!-- table(poke.train$isLegendary, knnrun) -->
library(MASS)
library(MLmetrics)
poke.train$hasGender<-factor(poke.train$hasGender)
poke.train$isLegendary<-factor(poke.train$isLegendary)
pokelda<-lda(poke.train$isLegendary~poke.train$hasGender+poke.train$Total)
table(poke.train$isLegendary, predict(pokelda)$class)
Sensitivity(poke.train$isLegendary, predict(pokelda)$class)
Recall(poke.train$isLegendary, predict(pokelda)$class) #same as sensitivity
Precision(poke.train$isLegendary, predict(pokelda)$class)
Specificity(poke.train$isLegendary, predict(pokelda)$class)
F1_Score(poke.train$isLegendary, predict(pokelda)$class)
pokemon<-read.csv("pokemon_alopez247.csv")
poke <- data.frame(pokemon, stringsAsFactors = TRUE)
poke[is.na(poke)] <- 0
poke$isLegendary<-(as.integer(factor(poke$isLegendary))-1)
poke$hasGender<-(as.integer(factor(poke$hasGender))-1)
poke<-poke[,-c(1,2)]
set.seed(1995)
train<-sample(1:nrow(poke),432)
poke.train<-poke[train,]
poke.test<-poke[-train,]
#install.packages(MASS)
library(MASS)
pkmlda<- lda(poke$hasMegaEvolution~poke$hasGender+poke$Type_1+poke$Total+poke$Generation+poke$Pr_Male+poke$isLegendary, data=poke, CV=TRUE)
table(poke$hasMegaEvolution, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$hasMegaEvolution+poke$Total+poke$hasGender+poke$Pr_Male, data=poke, CV=TRUE)
table(poke$hasMegaEvolution, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$hasGender+poke$Pr_Male, data=poke, CV=TRUE)
table(poke$isLegendary, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$Type_1+poke$Type_2, data=poke, CV=TRUE)
table(poke$isLegendary, pkmlda$class)
pokeqda<-qda(poke.train$isLegendary~poke.train$hasGender+poke.train$Total)
table(poke.train$isLegendary, predict(pokeqda)$class)
Sensitivity(poke.train$isLegendary, predict(pokelda)$class)
Recall(poke.train$isLegendary, predict(pokeqda)$class) #same as sensitivity
Precision(poke.train$isLegendary, predict(pokeqda)$class)
Specificity(poke.train$isLegendary, predict(pokeqda)$class)
F1_Score(poke.train$isLegendary, predict(pokeqda)$class)
simlog<-glm(factor(poke.train$isLegendary)~poke.train$hasGender+poke.train$Total, family = "binomial")
table(predict(simlog, type = "response")>0.5, poke.train$isLegendary)
library(class)
library(boot)
library("gclus")
# typeglm <- glm(poke.train$hasGender~poke.train$Type_1 + poke.train$Type_2, data=poke.train)
# typeglm
# predgend<- predict(typeglm, newdata = poke.test, type= "response")
# predgend
# predgend2<- predgend[c(1:289)]
# length(poke.test$hasGender)
# table(predgend2>0.5, poke.test$hasGender)
pokeglm<- glm(isLegendary ~ hasGender + Catch_Rate, family = "binomial", data = poke)
summary(pokeglm)
attach(poke2)
#attach(poke2)
pokeglm <- list()
cv.mse <- NA
for(i in 1:nrow(poke)){
cvisLeg <- poke$isLegendary[-i]
cvhasGend <- poke$hasGender[-i]
cvCatchR <- poke$Catch_Rate[-i]
pokeglm[[i]]<- glm(cvisLeg ~ cvhasGend + cvCatchR, family = "binomial")
cv.mse[i] <- (predict(pokeglm[[i]], newdata = data.frame(poke$isLegendary[i])) - poke$isLegendary[i])^2
}
mean(cv.mse)
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
plot(Generation~isLegendary)
TheLegends<-as.data.frame(table(pokeLegend$Generation))
colnames(TheLegends)<-c("Generation", "Legends")
TheLegends
summary(TheLegends)
plot<-ggplot(TheLegends, aes(Generation, Legends))+geom_bar(stat="identity", fill = wes_palette("Moonrise3", 6, type = "continuous"))
plot
#color=scale_fill_manual(values=wes_palette("FantasticFox1"))
TheMan<-as.data.frame(table(pokeLegend$Type_1))
colnames(TheMan)<-c("Type 1", "Legends")
TheMan
summary(TheMan)
plot(TheMan)
maxTotalL<-order(TheMan$Legends, decreasing = TRUE)
head(TheMan[maxTotalL,])
#Of Type 2
TheMyth<-as.data.frame(table(pokeLegend$Type_2))
colnames(TheMyth)<-c("Type 2", "Legends")
TheMyth
summary(TheMyth)
plot(TheMyth)
maxTotalL2<-order(TheMyth$Legends, decreasing = TRUE)
head(TheMyth[maxTotalL2,])
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
plot(Generation~isLegendary)
TheLegends<-as.data.frame(table(pokeLegend$Generation))
colnames(TheLegends)<-c("Generation", "Legends")
TheLegends
summary(TheLegends)
plot<-ggplot(TheLegends, aes(Generation, Legends))+geom_bar(stat="identity", fill = wes_palette("Moonrise3", 6, type = "continuous"))
plot
#color=scale_fill_manual(values=wes_palette("FantasticFox1"))
TheMan<-as.data.frame(table(pokeLegend$Type_1))
colnames(TheMan)<-c("Type 1", "Legends")
TheMan
summary(TheMan)
plot(TheMan)
maxTotalL<-order(TheMan$Legends, decreasing = TRUE)
head(TheMan[maxTotalL,])
#Of Type 2
TheMyth<-as.data.frame(table(pokeLegend$Type_2))
colnames(TheMyth)<-c("Type 2", "Legends")
TheMyth
summary(TheMyth)
plot(TheMyth)
maxTotalL2<-order(TheMyth$Legends, decreasing = TRUE)
head(TheMyth[maxTotalL2,])
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
plot(Generation~isLegendary)
TheLegends<-as.data.frame(table(pokeLegend$Generation))
colnames(TheLegends)<-c("Generation", "Legends")
TheLegends
summary(TheLegends)
plot<-ggplot(TheLegends, aes(Generation, Legends))+geom_bar(stat="identity", fill = wes_palette("Moonrise3", 6, type = "continuous"))
plot
#color=scale_fill_manual(values=wes_palette("FantasticFox1"))
TheMan<-as.data.frame(table(pokeLegend$Type_1))
colnames(TheMan)<-c("Type 1", "Legends")
TheMan
summary(TheMan)
plot(TheMan)
maxTotalL<-order(TheMan$Legends, decreasing = TRUE)
head(TheMan[maxTotalL,])
#Of Type 2
TheMyth<-as.data.frame(table(pokeLegend$Type_2))
colnames(TheMyth)<-c("Type 2", "Legends")
TheMyth
summary(TheMyth)
plot(TheMyth)
maxTotalL2<-order(TheMyth$Legends, decreasing = TRUE)
head(TheMyth[maxTotalL2,])
knitr::opts_chunk$set(echo = TRUE)
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
knitr::opts_chunk$set(echo = TRUE)
pokemon<-read.csv("pokemon_alopez247.csv")
summary(pokemon)
set.seed(1995)
train<-sample(1:nrow(pokemon),432)
poke.test<-pokemon[-train,]
poke.train<-pokemon[train,]
eucdist<-dist(pokemon, method="euclidean")
mandist<-dist(pokemon, method = "manhattan")
clusPokemon<-hclust(eucdist, method = "single")
clusPokemon2<-hclust(mandist, method = "single")
plot(clusPokemon)
plot(clusPokemon2)
clusPokemonAvg<-hclust(eucdist, method = "average")
clusPokemonAvg2<-hclust(mandist, method = "average")
plot(clusPokemonAvg)
plot(clusPokemonAvg2)
clusComplete<-hclust(eucdist, method = "complete")
clusComplete2<-hclust(mandist, method = "complete")
plot(clusComplete)
plot(clusComplete2)
mancom <- cutree(clusComplete2, 2)
euccom<-cutree(clusComplete, 2)
manavg <- cutree(clusPokemonAvg2, 2)
eucavg<-cutree(clusPokemonAvg, 2)
table(mancom, euccom)
table(manavg, eucavg)
table(manavg, mancom)
table(euccom, eucavg)
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
#distPoke<-daisy(pokeNum)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
head(out[clusterGroups,])
library(mclust)
library(cluster)
library(dplyr)
library(fpc)
pokeNum<-select_if(pokemon, is.numeric)
distPoke<-daisy(pokemon)
summary(distPoke)
pokeDist<-cmdscale(distPoke)
plot(pokeDist, type = "n")
text(pokeDist, rownames(pokeDist))
set.seed(413)
clustore<-matrix(0, nrow = 721, ncol=25)
wsstore<-NULL
for(i in 1:10){
km<-kmeans(pokeDist, i, nstart=10)
clustore[,i]<-km$cluster
wsstore[i]<-km$tot.withinss
}
plot(wsstore)
kPoke2<-kmeans(pokeDist, 7, nstart=25)
plot(pokeDist, col = kPoke2$cluster)
points(kPoke2$centers, col = 1:4, pch=8, cex=2)
out <- cbind(pokemon, clusterNum = kPoke2$cluster)
clusterGroups<-order(out$clusterNum, decreasing = TRUE)
out[clusterGroups,]
for(i in 1:7) {
print(paste("Mean for total for cluster ",i))
print(mean(out[which(out$clusterNum==i),]$Total))
}
for(i in 1:7) {
print(paste("Number of isLegendary for cluster ",i))
legendTemp<-out[which(out$clusterNum==i),]
print(count(legendTemp,vars=isLegendary))
}
library(ggplot2)
type<-ggplot(pokemon, aes(pokemon$Type_1, fill = pokemon$Type_1)) + geom_histogram(stat="count", color = "black") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
type
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
maxTotal<-order(pokemon$Total, decreasing = TRUE)
head(pokemon[maxTotal,])
library(ggplot2)
plot<-ggplot(pokemon, aes(x =Total, fill = isLegendary)) + geom_histogram()
plot
pokemon$hasGender<-factor(pokemon$hasGender)
plot2<-ggplot(pokemon, aes(x =hasGender, fill = isLegendary)) + geom_bar()
plot2
library(DAAG)
linmod <- lm(poke.train$Total~poke.train$HP+poke.train$Attack+poke.train$Defense)
summary(linmod)
#plot(linmod)
plot(poke.train$HP+poke.train$Attack+poke.train$Defense, poke.train$Total)
abline(linmod, h = 0.5, col = "red")
#mmmm tasty sig values
predicted<-predict(linmod, newdata=poke.test)
mean(linmod$residuals^2)
mean((poke.test$Total-predicted)^2)
library(tree)
poke<-data.frame(pokemon)
attach(poke)
pocl<-tree(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke)
plot(pocl)
text(pocl)
cv.pocl<-cv.tree(pocl, FUN=prune.tree)
plot(cv.pocl,type="b")
p.pocl<-prune.tree(pocl,best=10)
plot(p.pocl)
text(p.pocl)
summary(p.pocl)
library(randomForest)
set.seed(1995)
pokebag<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=6,importance=FALSE)
pokebag
pokebag2<-randomForest(isLegendary~ Total+hasGender,data=poke.train,mtry=6,importance=FALSE)
pokebag2
pokeRF<-randomForest(Total~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=poke,mtry=3,importance=TRUE)
pokeRF
pokeRF2<-randomForest(isLegendary~Total+hasGender,data=poke.train,mtry=3,importance=TRUE)
pokeRF2
# set.seed(1995)
# train<-sample(1:nrow(pokemon),432)
# poke.test<-pokemon[-train,]
# poke.train<-pokemon[train,]
# pokeknn<-poke.train[,-13]
# pokeknn<-data.frame(pokeknn)
#
# library(class)
# # knnrun<-knn.cv(poke.trainNum, cl = poke.trainNum$isLegendary, k = 5, prob = TRUE)
# # table(poke.trainNum$isLegendary, knnrun)
#
# knnrun<-knn(poke.train[, -13],poke.test[,-13],  cl = poke.train$isLegendary, k = 4, prob=TRUE)
# table(poketrain$isLegendary, knnrun)
# # <!-- library(class) -->
# # <!-- knnrun<-knn.cv(pokeDist, cl = poke.train$isLegendary, k = 5, prob = TRUE) -->
# # <!-- table(poke.train$isLegendary, knnrun) -->
library(MASS)
library(MLmetrics)
poke.train$hasGender<-factor(poke.train$hasGender)
poke.train$isLegendary<-factor(poke.train$isLegendary)
pokelda<-lda(poke.train$isLegendary~poke.train$hasGender+poke.train$Total)
table(poke.train$isLegendary, predict(pokelda)$class)
Sensitivity(poke.train$isLegendary, predict(pokelda)$class)
Recall(poke.train$isLegendary, predict(pokelda)$class) #same as sensitivity
Precision(poke.train$isLegendary, predict(pokelda)$class)
Specificity(poke.train$isLegendary, predict(pokelda)$class)
F1_Score(poke.train$isLegendary, predict(pokelda)$class)
pokemon<-read.csv("pokemon_alopez247.csv")
poke <- data.frame(pokemon, stringsAsFactors = TRUE)
poke[is.na(poke)] <- 0
poke$isLegendary<-(as.integer(factor(poke$isLegendary))-1)
poke$hasGender<-(as.integer(factor(poke$hasGender))-1)
poke<-poke[,-c(1,2)]
set.seed(1995)
train<-sample(1:nrow(poke),432)
poke.train<-poke[train,]
poke.test<-poke[-train,]
#install.packages(MASS)
library(MASS)
pkmlda<- lda(poke$hasMegaEvolution~poke$hasGender+poke$Type_1+poke$Total+poke$Generation+poke$Pr_Male+poke$isLegendary, data=poke, CV=TRUE)
table(poke$hasMegaEvolution, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$hasMegaEvolution+poke$Total+poke$hasGender+poke$Pr_Male, data=poke, CV=TRUE)
table(poke$hasMegaEvolution, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$hasGender+poke$Pr_Male, data=poke, CV=TRUE)
table(poke$isLegendary, pkmlda$class)
pkmlda<- lda(poke$isLegendary~poke$Type_1+poke$Type_2, data=poke, CV=TRUE)
table(poke$isLegendary, pkmlda$class)
pokeqda<-qda(poke.train$isLegendary~poke.train$hasGender+poke.train$Total)
table(poke.train$isLegendary, predict(pokeqda)$class)
Sensitivity(poke.train$isLegendary, predict(pokelda)$class)
Recall(poke.train$isLegendary, predict(pokeqda)$class) #same as sensitivity
Precision(poke.train$isLegendary, predict(pokeqda)$class)
Specificity(poke.train$isLegendary, predict(pokeqda)$class)
F1_Score(poke.train$isLegendary, predict(pokeqda)$class)
simlog<-glm(factor(poke.train$isLegendary)~poke.train$hasGender+poke.train$Total, family = "binomial")
table(predict(simlog, type = "response")>0.5, poke.train$isLegendary)
library(class)
library(boot)
library("gclus")
# typeglm <- glm(poke.train$hasGender~poke.train$Type_1 + poke.train$Type_2, data=poke.train)
# typeglm
# predgend<- predict(typeglm, newdata = poke.test, type= "response")
# predgend
# predgend2<- predgend[c(1:289)]
# length(poke.test$hasGender)
# table(predgend2>0.5, poke.test$hasGender)
pokeglm<- glm(isLegendary ~ hasGender + Catch_Rate, family = "binomial", data = poke)
summary(pokeglm)
#attach(poke2)
pokeglm <- list()
cv.mse <- NA
for(i in 1:nrow(poke)){
cvisLeg <- poke$isLegendary[-i]
cvhasGend <- poke$hasGender[-i]
cvCatchR <- poke$Catch_Rate[-i]
pokeglm[[i]]<- glm(cvisLeg ~ cvhasGend + cvCatchR, family = "binomial")
cv.mse[i] <- (predict(pokeglm[[i]], newdata = data.frame(poke$isLegendary[i])) - poke$isLegendary[i])^2
}
mean(cv.mse)
library(wesanderson)
#https://www.kaggle.com/excaliburzero/predicting-legendary-pokemon
poke<-data.frame(pokemon)
pokeLegend<-poke[which(isLegendary=='True'),]
plot(Generation~isLegendary)
TheLegends<-as.data.frame(table(pokeLegend$Generation))
colnames(TheLegends)<-c("Generation", "Legends")
TheLegends
summary(TheLegends)
plot<-ggplot(TheLegends, aes(Generation, Legends))+geom_bar(stat="identity", fill = wes_palette("Moonrise3", 6, type = "continuous"))
plot
#color=scale_fill_manual(values=wes_palette("FantasticFox1"))
TheMan<-as.data.frame(table(pokeLegend$Type_1))
colnames(TheMan)<-c("Type 1", "Legends")
TheMan
summary(TheMan)
plot(TheMan)
maxTotalL<-order(TheMan$Legends, decreasing = TRUE)
head(TheMan[maxTotalL,])
#Of Type 2
TheMyth<-as.data.frame(table(pokeLegend$Type_2))
colnames(TheMyth)<-c("Type 2", "Legends")
TheMyth
summary(TheMyth)
plot(TheMyth)
maxTotalL2<-order(TheMyth$Legends, decreasing = TRUE)
head(TheMyth[maxTotalL2,])
